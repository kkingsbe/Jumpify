{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\home.svelte",
    "..\\..\\jumps.svelte",
    "..\\..\\import.svelte",
    "..\\..\\sidebar.svelte",
    "..\\..\\home-banner.svelte",
    "..\\..\\stat-card-container.svelte",
    "..\\..\\display-mode-select.svelte",
    "..\\..\\track3d_cesium.svelte",
    "..\\..\\groundtrack.svelte",
    "..\\..\\icon.svelte",
    "..\\..\\sidebar-item.svelte",
    "..\\..\\jump-graphs.svelte",
    "..\\..\\stat-card.svelte",
    "..\\..\\DisplacementGraph.svelte",
    "..\\..\\VSGraph.svelte",
    "..\\..\\altgraph.svelte",
    "..\\..\\HSGraph.svelte",
    "..\\..\\SpeedGraph.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\texport let name;\r\n\timport Sidebar from \"./components/sidebar.svelte\"\r\n\timport Home from \"./components/home.svelte\"\r\n\timport Jumps from \"./components/jumps.svelte\"\r\n\timport Import from \"./components/import.svelte\"\r\n\tvar page = 2;\r\n</script>\r\n\r\n<main>\r\n\t<Sidebar bind:page={page}></Sidebar>\r\n\t{#if page == 1}\r\n\t\t<Home></Home>\r\n\t{/if}\r\n\t{#if page == 2}\r\n\t\t<Jumps></Jumps>\r\n\t{/if}\r\n\t{#if page == 3}\r\n\t\t<Import></Import>\r\n\t{/if}\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\ttext-align: center;\r\n\t\tmargin: 0 auto;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t\tbackground: linear-gradient(45deg, #8E2DE2, rgb(104, 0, 224));\r\n\t\toverflow-y: hidden;\r\n\t\tcolor: white;\r\n\t}\r\n</style>",
    "<script>\r\n\texport let name;\r\n\timport HomeBanner from \"./home-banner.svelte\"\r\n    import StatCardContainer from \"./stat-card-container.svelte\"\r\n</script>\r\n\r\n<home>\r\n\t<HomeBanner></HomeBanner>\r\n    <StatCardContainer></StatCardContainer>\r\n</home>\r\n\r\n<style>\r\n\thome {\r\n\t\ttext-align: center;\r\n\t\tmargin: 0 auto;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t}\r\n</style>",
    "<script>\r\n    import JumpSelector from \"./jump-selector.svelte\";\r\n    import ModeSelect from \"./display-mode-select.svelte\"\r\n    import JumpGraphs from \"./jump-graphs.svelte\"\r\n    import GroundTrack from \"./groundtrack.svelte\"\r\n    //import Track3D from \"./track3d.svelte\"\r\n    import Track3D from \"./track3d_cesium.svelte\"\r\n    \r\n    \r\n    var selectedMode = \"graphs\"\r\n\r\n    var Datastore = require(\"nedb\")\r\n    var db = new Datastore(\"C:/Program Files/Jumpify/jumps.db\")\r\n    var selectedJump\r\n    var selectedData\r\n    var dbLoaded = false\r\n\r\n    $: if (selectedJump != \"Select Jump:\" && dbLoaded && typeof(selectedJump) !== \"undefined\") { db.find({date: selectedJump}, function(err, docs) {\r\n        if(err) alert(err)\r\n        selectedData = docs[0].data\r\n    })}\r\n\r\n    //$: console.log(selectedData)\r\n\r\n    var data = {};\r\n\r\n    db.loadDatabase(function(err) {\r\n        dbLoaded = true\r\n        if(err) alert(err)\r\n        db.find({}, function(err, docs) {\r\n            if(err) alert(err)\r\n            else {\r\n                data = docs\r\n            }\r\n        })\r\n    })\r\n</script>\r\n\r\n<jumps>\r\n    <JumpSelector bind:selectedJump={selectedJump}></JumpSelector>\r\n    <ModeSelect bind:selectedMode={selectedMode}></ModeSelect>\r\n    {#if selectedMode == \"graphs\"}\r\n        <JumpGraphs jump={selectedData}></JumpGraphs>\r\n    {/if}\r\n    {#if selectedMode == \"ground track\"}\r\n        <GroundTrack bind:jump={selectedData}></GroundTrack>\r\n    {/if}\r\n    {#if selectedMode == \"track 3d\"}\r\n        <Track3D bind:jump={selectedData}></Track3D>\r\n    {/if}\r\n</jumps>\r\n\r\n<style>\r\n    jumps {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        width: 100%;\r\n        overflow-y: scroll;\r\n        padding-top: 2vw;\r\n    }\r\n</style>",
    "<script>\r\n    var fs = require('fs'); // Load the File System to execute our common tasks (CRUD)\r\n    var nmea = require('nmea')\r\n    var Datastore = require(\"nedb\")\r\n    var jumpsDB = new Datastore(\"C:/Program Files/Jumpify/jumps.db\")\r\n    var statsDB = new Datastore(\"C:/Program Files/Jumpify/stats.db\")\r\n    jumpsDB.loadDatabase()\r\n    statsDB.loadDatabase()\r\n\r\n    let input;\r\n    let files;\r\n\r\n    var existingJumpDates = [];\r\n\r\n    jumpsDB.loadDatabase(function(err) {\r\n        if(err) alert(err)\r\n        jumpsDB.find({}, {date: 1}, function(err, docs) {\r\n            if(err) alert(err)\r\n            else {\r\n                existingJumpDates = docs;\r\n            }\r\n            generateStats()\r\n        })\r\n    })\r\n\r\n    function importFiles() {\r\n        console.log(files)\r\n        for(let i = 0; i < files.length; i++) {\r\n            let file = files[i];\r\n            fs.readFile(file.path, 'utf-8', (err, data) => {\r\n                if(err){\r\n                    alert(\"An error ocurred reading the file :\" + err.message);\r\n                    return;\r\n                }\r\n\r\n                let lines = data.split('\\n')\r\n                let parsedData = []\r\n                let date = 0\r\n                lines.forEach(line => {\r\n                    let parsed\r\n                    try {\r\n                        parsed = nmea.parse(line)\r\n                        //console.log(parsed)\r\n                    } catch(e) {console.log(e)}\r\n                    \r\n                    if(typeof(parsed) !== \"undefined\" && parsed.sentence == \"RMC\" && date == 0) {\r\n                        let parseddate = parsed.date\r\n                        let timestamp = parsed.timestamp\r\n\r\n                        let d = parseddate.substring(0,2)\r\n                        let m = parseddate.substring(2,4)\r\n                        let y = parseddate.substring(4,6)\r\n                        let h = timestamp.substring(0,2)\r\n                        let min = timestamp.substring(2,4)\r\n                        let sec = timestamp.substring(4,6)\r\n                        let utc_str = `20${y}-${m}-${d}T${h}:${min}:${sec}Z`\r\n                        let dt = new Date(utc_str)\r\n                        date = dt.toString()\r\n                    }\r\n\r\n                    //console.log(parsedData)\r\n                    if(typeof(parsed) !== \"undefined\" && parsed.sentence == \"GGA\") {\r\n                        parsedData.push(parsed)\r\n                    }\r\n                    if(typeof(parsed) !== \"undefined\" && parsed.sentence == \"RMC\") {\r\n                        //console.log(parsed.speedKnots)\r\n                        if(parsedData.length > 0) parsedData[parsedData.length-1].speedKnots = parsed.speedKnots\r\n                    }\r\n                })\r\n\r\n                let alreadyExists = false\r\n                existingJumpDates.forEach(d => {\r\n                    if(d.date == date) alreadyExists = true\r\n                })\r\n                console.log(parsedData)\r\n                if(!alreadyExists) {\r\n                    console.log(existingJumpDates)\r\n                    var doc = {\r\n                        date: date,\r\n                        data: parsedData\r\n                    }\r\n                    jumpsDB.insert(doc, function(err, newDoc) {\r\n                        if(err) alert(err)\r\n                        generateStats()\r\n                    })\r\n                    alert(\"Import Success\")\r\n                } else {\r\n                    alert(\"ERROR: Jump already imported\")\r\n                    generateStats()\r\n                }\r\n                input.value = ''\r\n            });\r\n        }\r\n    }\r\n\r\n    function generateStats() {\r\n        statsDB.remove({ }, { multi: true }, function (err, numRemoved) {\r\n            jumpsDB.find({}, function(err, docs) {\r\n                let jumpsLogged = docs.length\r\n                let stats = {jumpsLogged: jumpsLogged}\r\n                statsDB.insert(stats, function(err, newDow) {\r\n                    if(err) alert(err)\r\n                })\r\n            })\r\n        });\r\n    }\r\n</script>\r\n\r\n<import>\r\n    <div class=\"card\">\r\n        <p class=\"title\">Import Data:</p>\r\n        <input id=\"fileselector\" type=\"file\" bind:this={input} bind:files>\r\n        <div class=\"btn\" on:click={importFiles}>\r\n            <p>Import!</p>\r\n        </div>\r\n    </div>\r\n</import>\r\n\r\n<style>\r\n    import {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n    .btn {\r\n        background: #28a745;\r\n        padding: 1vw;\r\n        width: fit-content;\r\n        height: fit-content;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        border-radius: 0.5vw;\r\n        cursor: pointer;\r\n        box-shadow: 1px 1px 5px rgb(0 0 0 / 0.3);\r\n    }\r\n\r\n    p {\r\n        color: white;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    .title {\r\n        color: black;\r\n        padding: 0px;\r\n        margin: 0px;\r\n        margin-bottom: 1vw;\r\n        font-size: 1.5vw;\r\n    }\r\n\r\n    .card {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background: white;\r\n        padding: 2em;\r\n        border-radius: 2vw;\r\n    }\r\n\r\n    input {\r\n        color: black;\r\n    }\r\n</style>",
    "<script>\r\n\timport Icon from \"./icon.svelte\"\r\n    import SidebarItem from \"./sidebar-item.svelte\"\r\n    export let page;\r\n\r\n    var homeSelected = false;\r\n    var jumpsSelected = false;\r\n    var importSelected = false;\r\n\r\n    switch(page) {\r\n        case 1:\r\n            homeSelected = true;\r\n            break;\r\n        case 2:\r\n            jumpsSelected = true;\r\n            break;\r\n        case 3:\r\n            importSelected = true;\r\n            break;\r\n    }\r\n\r\n    $: if(homeSelected) {\r\n        selectHome()\r\n        page = 1\r\n    }\r\n\r\n    $: if(jumpsSelected) {\r\n        selectJumps()\r\n        page = 2\r\n    }\r\n\r\n    $: if(importSelected) {\r\n        selectImport()\r\n        page = 3\r\n    }\r\n\r\n    function selectHome() {\r\n        homeSelected = true;\r\n        jumpsSelected = false;\r\n        importSelected = false;\r\n    }\r\n\r\n    function selectJumps() {\r\n        homeSelected = false;\r\n        jumpsSelected = true;\r\n        importSelected = false;\r\n\r\n        console.log(jumpsSelected)\r\n    }\r\n\r\n    function selectImport() {\r\n        homeSelected = false;\r\n        jumpsSelected = false;\r\n        importSelected = true;\r\n    }\r\n</script>\r\n\r\n<sidebar>\r\n\t<Icon src=\"./res/icon.png\"></Icon>\r\n    <div class=\"items\">\r\n        <SidebarItem bind:selected={homeSelected} icon=\"./res/home.svg\" text=\"Home\"></SidebarItem>\r\n        <SidebarItem bind:selected={jumpsSelected} icon=\"./res/jumps.png\" text=\"Jumps\"></SidebarItem>\r\n        <SidebarItem bind:selected={importSelected} icon=\"./res/import.png\" text=\"Import\"></SidebarItem>\r\n    </div>\r\n</sidebar>\r\n\r\n<style>\r\n    sidebar {\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        border-right: 1px solid gray;\r\n        padding-right: 2vw;\r\n    }\r\n\r\n    .items {\r\n        height: 100%;\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-around;\r\n    }\r\n</style>",
    "<script>\r\n    export let name;\r\n</script>\r\n\r\n<banner>\r\n    <p>Hello, Kyle</p>\r\n</banner>\r\n\r\n<style>\r\n    banner {\r\n        width: 100%;\r\n    }\r\n\r\n    p {\r\n        font-size: 5vw;\r\n        font-weight: bold;\r\n        margin-top: 1vw;\r\n        margin-left: 2vw;\r\n        text-align: left;\r\n    }\r\n</style>",
    "<script>\r\n    import Card from \"./stat-card.svelte\"\r\n    var Datastore = require(\"nedb\")\r\n\r\n    var statsDB = new Datastore(\"C:/Program Files/Jumpify/stats.db\")\r\n    var jumpsDB = new Datastore(\"C:/Program Files/Jumpify/jumps.db\")\r\n    var stats = {}\r\n\r\n    statsDB.loadDatabase(function(err) {\r\n        if(err) alert(err)\r\n        statsDB.find({}, function(err, docs) {\r\n            stats = docs[0]\r\n        })\r\n        jumpsDB.loadDatabase(function(err) {\r\n            if(err) alert(err)\r\n            jumpsDB.find({}, {date: 1}, function(err, docs) {\r\n                if(err) alert(err)\r\n                else {\r\n                    let jumpsToday = 0\r\n                    let today = (new Date().toISOString()).split(\"T\")[0]\r\n                    for(let i = 0; i < docs.length; i ++) {\r\n                        let d = new Date(docs[i].date)\r\n                        let jumpDate = d.toISOString().split(\"T\")[0]\r\n                        if(jumpDate == today) {\r\n                            jumpsToday ++\r\n                        }\r\n                    }\r\n                    stats.jumpsToday = jumpsToday\r\n                }\r\n            })\r\n        })\r\n    })\r\n\r\n    \r\n</script>\r\n\r\n<container>\r\n    <div class=\"row\">\r\n        <Card statType=\"Jumps Logged\" statValue={stats.jumpsLogged}></Card>\r\n        <Card statType=\"Freefall Time Logged\"></Card>\r\n        <Card statType=\"Jumps Logged Today\" statValue={stats.jumpsToday}></Card>\r\n    </div>\r\n    <div class=\"row\">\r\n        <Card statType=\"Maximum Speed\"></Card>\r\n        <Card statType=\"Maximum Altitude\"></Card>\r\n        <Card statType=\"Average Deployment Altitude\"></Card>\r\n    </div>\r\n</container>\r\n\r\n<style>\r\n    .row {\r\n       display: flex;\r\n       flex-direction: row;\r\n       justify-content: space-around;\r\n       margin-bottom: 5vw; \r\n    }\r\n    container {\r\n        display: grid;\r\n    }\r\n</style>",
    "<script>\r\n    export let selectedMode\r\n\r\n    let graphsSelected = true\r\n    let groundTrackSelected = false\r\n    let track3DSelected = false\r\n    let graphsClass = \"mode selected\"\r\n    let groundTrackClass = \"mode\"\r\n    let track3DClass = \"mode\"\r\n\r\n    function selectGraphs() {\r\n        graphsSelected = true\r\n        groundTrackSelected = false\r\n        track3DSelected = false\r\n\r\n        selectedMode = \"graphs\"\r\n\r\n        graphsClass = \"mode selected\"\r\n        groundTrackClass = \"mode\"\r\n        track3DClass = \"mode\"\r\n    }\r\n\r\n    function selectGroundTrack() {\r\n        graphsSelected = false\r\n        groundTrackSelected = true\r\n        track3DSelected = false\r\n\r\n        selectedMode = \"ground track\"\r\n\r\n        graphsClass = \"mode\"\r\n        groundTrackClass = \"mode selected\"\r\n        track3DClass = \"mode\"\r\n    }\r\n\r\n    function selectTrack3D() {\r\n        graphsSelected = false\r\n        groundTrackSelected = false\r\n        track3DSelected = true\r\n\r\n        selectedMode = \"track 3d\"\r\n        graphsClass = \"mode\"\r\n        groundTrackClass = \"mode\"\r\n        track3DClass = \"mode selected\"\r\n    }\r\n</script>\r\n\r\n<modeSelect>\r\n    <div class={graphsClass} on:click={selectGraphs}>Graphs</div>\r\n    <div class={groundTrackClass} on:click={selectGroundTrack}>Ground Track</div>\r\n    <div class={track3DClass} on:click={selectTrack3D}>3D Track</div>\r\n</modeSelect>\r\n\r\n<style>\r\n    modeSelect {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-around;\r\n        width: 100%;\r\n        margin-top: 2vw;\r\n        margin-bottom: 2vw;\r\n    }\r\n\r\n    .mode {\r\n        font-size: 1.5vw;\r\n        background: #6c757d;\r\n        color: white;\r\n        padding: 0.75vw;\r\n        border-radius: 0.5vw;\r\n        cursor: pointer;\r\n        box-shadow: 1px 1px 5px rgb(0 0 0 / 0.3);\r\n    }\r\n\r\n    .selected {\r\n        background: rgb(255, 212, 40) !important;\r\n        color: rgb(56, 56, 56);\r\n    }\r\n</style>",
    "<script>\r\n    export let jump\r\n    import {onMount} from 'svelte'\r\n\timport { Viewer } from 'cesium';\r\n\timport '../../node_modules/cesium/Build/Cesium/Widgets/widgets.css'\r\n\r\n    let viewer\r\n    var mounted = false\r\n\r\n    var datapoints = []\r\n    $: if(typeof(jump) !== \"undefined\" && mounted) {\r\n        let coords = getDecimalCoords()\r\n        datapoints = []\r\n        let i = 0\r\n        let largestVal = 0\r\n        while(i < coords.length) {\r\n            let coord = coords[i]\r\n            datapoints.push([coords[0], coords[1], jump[i].alt])\r\n            i++\r\n        }\r\n        console.log(datapoints)\r\n    }\r\n\r\n    onMount(async () => {\r\n\t    window.CESIUM_BASE_URL = './build';\r\n        mounted = true\r\n        viewer = new Viewer('cesiumContainer')\r\n    })\r\n\r\n    function getDecimalCoords() {\r\n        let arr = []\r\n        for(let i = 0; i < jump.length; i++) {\r\n            let point = jump[i]\r\n            let lat = point.lat\r\n            let latPole = point.latPole\r\n            let lon = point.lon\r\n            let lonPole = point.lonPole\r\n\r\n            if(lat == \"\" || lon == \"\") continue\r\n\r\n            let latDeg = parseInt(lat.substring(0,2))\r\n            let latMin = parseInt(lat.substring(2,4))\r\n            let latSec = parseFloat(lat.substring(4,8)) * 60\r\n\r\n            let lonDeg = parseInt(lon.substring(0,3))\r\n            let lonMin = parseInt(lon.substring(3,5))\r\n            let lonSec = parseFloat(lon.substring(5,9)) * 60\r\n            \r\n            let latDecimal = ConvertDMSToDD(latDeg, latMin, latSec, latPole)\r\n            let lonDecimal = ConvertDMSToDD(lonDeg, lonMin, lonSec, lonPole)\r\n\r\n            arr.push([latDecimal, lonDecimal])\r\n\r\n            //console.log(`Lat: ${latDecimal.toFixed(2)} Lon: ${lonDecimal.toFixed(2)}`)\r\n            //console.log(`LAT: D: ${latDeg} | M: ${latMin} | S: ${latSec}`)\r\n            //console.log(`LON: D: ${lonDeg} | M: ${lonMin} | S: ${lonSec}`)\r\n        }\r\n        return arr\r\n    }\r\n\r\n    function ConvertDMSToDD(degrees, minutes, seconds, direction) {\r\n        var dd = degrees + minutes/60 + seconds/(60*60);\r\n\r\n        if (direction == \"S\" || direction == \"W\") {\r\n            dd = dd * -1;\r\n        } // Don't do anything for N or E\r\n        return dd;\r\n    }\r\n</script>\r\n\r\n<track3d>\r\n    <div id=\"cesiumContainer\" class=\"container\"></div>\r\n</track3d>\r\n\r\n<style>\r\n    track3d {\r\n        width: 75%;\r\n        height: 75%;\r\n    }\r\n    .container {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n</style>",
    "<svelte:head>\r\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.4.0/dist/leaflet.css\"\r\n    integrity=\"sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==\"\r\n    crossorigin=\"\">\r\n</svelte:head>\r\n\r\n<script>\r\n    import L from 'leaflet'\r\n    import {onMount} from 'svelte'\r\n    import {DMS2Decimal} from 'dms-to-decimal'\r\n\r\n    export let jump\r\n    //$:console.log(jump)\r\n\r\n    let loaded = false\r\n    let decimalCoords = []\r\n    var map\r\n\r\n    $: if(jump && loaded) {\r\n        console.log(map)\r\n        if(typeof(map) !== 'undefined') map.remove()\r\n        decimalCoords = getDecimalCoords()\r\n        drawMap()\r\n    }\r\n\r\n    onMount(async () => {\r\n        decimalCoords = getDecimalCoords()\r\n        drawMap()\r\n        loaded = true\r\n    })\r\n\r\n    function drawMap() {\r\n        console.log(decimalCoords[0])\r\n        map = L.map('map',{\r\n            center: decimalCoords[0],\r\n            zoom: 20\r\n        });\r\n\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        }).addTo(map);\r\n\r\n        var polylinePoints = decimalCoords;            \r\n        \r\n        var polyline = L.polyline(polylinePoints).addTo(map);    \r\n    }\r\n\r\n    function getDecimalCoords() {\r\n        let arr = []\r\n        for(let i = 0; i < jump.length; i++) {\r\n            let point = jump[i]\r\n            let lat = point.lat\r\n            let latPole = point.latPole\r\n            let lon = point.lon\r\n            let lonPole = point.lonPole\r\n\r\n            if(lat == \"\" || lon == \"\") continue\r\n\r\n            let latDeg = parseInt(lat.substring(0,2))\r\n            let latMin = parseInt(lat.substring(2,4))\r\n            let latSec = parseFloat(lat.substring(4,8)) * 60\r\n\r\n            let lonDeg = parseInt(lon.substring(0,3))\r\n            let lonMin = parseInt(lon.substring(3,5))\r\n            let lonSec = parseFloat(lon.substring(5,9)) * 60\r\n            \r\n            let latDecimal = ConvertDMSToDD(latDeg, latMin, latSec, latPole)\r\n            let lonDecimal = ConvertDMSToDD(lonDeg, lonMin, lonSec, lonPole)\r\n\r\n            arr.push([latDecimal, lonDecimal])\r\n\r\n            //console.log(`Lat: ${latDecimal.toFixed(2)} Lon: ${lonDecimal.toFixed(2)}`)\r\n            //console.log(`LAT: D: ${latDeg} | M: ${latMin} | S: ${latSec}`)\r\n            //console.log(`LON: D: ${lonDeg} | M: ${lonMin} | S: ${lonSec}`)\r\n        }\r\n        return arr\r\n    }\r\n\r\n    function ConvertDMSToDD(degrees, minutes, seconds, direction) {\r\n        var dd = degrees + minutes/60 + seconds/(60*60);\r\n\r\n        if (direction == \"S\" || direction == \"W\") {\r\n            dd = dd * -1;\r\n        } // Don't do anything for N or E\r\n        return dd;\r\n    }\r\n</script>\r\n\r\n<groundtrack>\r\n    <div id=\"map\" class=\"map\"></div>\r\n</groundtrack>\r\n\r\n<style>\r\n    groundtrack {\r\n        width: 75%;\r\n        height: 75%;\r\n    }\r\n    .map {\r\n        height: 100%;\r\n        width: 100%;\r\n      }\r\n</style>",
    "<script>\r\n    export let src;\r\n</script>\r\n\r\n<icon>\r\n    <img src={src}>\r\n</icon>\r\n\r\n<style>\r\n    img {\r\n        width: 10vw;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    export let selected;\r\n    export let icon;\r\n    export let text;\r\n    $: console.log(selected)\r\n    function select() {\r\n        selected = true\r\n    }\r\n</script>\r\n\r\n<sidebar-item on:click={select}>\r\n    {#if selected}\r\n        <div class=\"selected-div\"></div>\r\n    {/if}\r\n    {#if !selected}\r\n        <div class=\"unselected-div\"></div>\r\n    {/if}\r\n    <img src={icon}>\r\n    <p>{text}</p>\r\n</sidebar-item>\r\n\r\n<style>\r\n    sidebar-item {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        height: 3.5vw;\r\n        width: 100%;\r\n        padding-right: 2vw;\r\n        cursor: pointer;\r\n    }\r\n\r\n    img {\r\n        height: 3vw;\r\n    }\r\n\r\n    p {\r\n        font-size: 1.75vw;\r\n    }\r\n\r\n    .selected-div {\r\n        height: 100%;\r\n        width: 0.5vw;\r\n        background: black;\r\n    }\r\n\r\n    .unselected-div {\r\n        height: 100%;\r\n        width: 0.5vw;\r\n        background: none;\r\n    }\r\n</style>",
    "<script>\r\n    export let jump\r\n    import Altgraph from \"./altgraph.svelte\"\r\n    import VSGraph from \"./VSGraph.svelte\"\r\n    import HSGraph from \"./HSGraph.svelte\"\r\n    import DisplacementGraph from \"./DisplacementGraph.svelte\"\r\n    import SpeedGraph from \"./SpeedGraph.svelte\"\r\n</script>\r\n\r\n<graphs>\r\n    <SpeedGraph bind:jump={jump}></SpeedGraph>\r\n    <Altgraph bind:jump={jump}></Altgraph>\r\n    <VSGraph bind:jump={jump}></VSGraph>\r\n    <HSGraph bind:jump={jump}></HSGraph>\r\n    <DisplacementGraph bind:jump={jump}></DisplacementGraph>\r\n</graphs>\r\n\r\n<style>\r\n    graphs {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding-bottom: 2vw;\r\n    }\r\n</style>",
    "<script>\r\n    export let statType\r\n    export let statValue;\r\n\r\n    switch (statType) {\r\n        case \"Jumps Logged\":\r\n            statValue = \"36\"\r\n            break\r\n        case \"Freefall Time Logged\":\r\n            statValue = \"158sec\"\r\n            break\r\n        case \"Jumps Logged Today\":\r\n            statValue = \"1\"\r\n            break\r\n        case \"Maximum Speed\":\r\n            statValue = \"198mph\"\r\n            break\r\n        case \"Maximum Altitude\":\r\n            statValue = \"15,552ft\"\r\n            break\r\n        case \"Average Deployment Altitude\":\r\n            statValue = \"4,205ft\"\r\n            break\r\n    }\r\n</script>\r\n\r\n<card>\r\n    <div class=\"text\">\r\n        <p class=\"type\">{statType}</p>\r\n        <p class=\"value\">{statValue}</p>\r\n    </div>\r\n</card>\r\n\r\n<style>\r\n    card {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        width: 20vw;\r\n        height: 11vw;\r\n        background: #FFB869;\r\n        border-radius: 1.5vw;\r\n        padding: 1vw;\r\n        border: 3px solid rgb(80, 80, 80);\r\n        box-shadow: 3px 3px 7px rgb(0 0 0 / 0.3);\r\n    }\r\n\r\n    .text {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n\r\n    .type {\r\n        margin: 0;\r\n        margin-right: auto;\r\n        margin-left: 0vw;\r\n        font-size: 1.5vw;\r\n        font-weight: normal;\r\n        color: rgb(0, 0, 0);\r\n    }\r\n\r\n    .value {\r\n        margin: 0;\r\n        margin-left: auto;\r\n        margin-right: 0vw;\r\n        font-size: 4vw;\r\n        color: rgb(54, 54, 54);\r\n    }\r\n\r\n    img {\r\n        width: 5vw;\r\n    }\r\n</style>",
    "<script>\r\n    import Line from \"svelte-chartjs/src/Line.svelte\"\r\n    export let jump\r\n\r\n    var labels = []\r\n    var datapoints = []\r\n    var chartData\r\n\r\n    $: if(jump && typeof(jump) !== \"undefined\") {\r\n        let decimalCoords = getDecimalCoords()\r\n        let startCoords = decimalCoords[0]\r\n        let startSec\r\n        labels = []\r\n        datapoints = []\r\n        for(let i = 0; i < decimalCoords.length; i++) {\r\n            let point = decimalCoords[i]\r\n            let displacement = measure(startCoords[0], startCoords[1], point[0], point[1])\r\n\r\n            let h = jump[i].timestamp.substring(0,2)\r\n            let min = jump[i].timestamp.substring(2,4)\r\n            let sec = jump[i].timestamp.substring(4)\r\n            let a = [h,min,sec]\r\n            let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2])\r\n\r\n            if(typeof(startSec) == \"undefined\") {\r\n                startSec = seconds\r\n                seconds = 0\r\n            } else {\r\n                seconds -= startSec\r\n            }\r\n\r\n            labels.push(Math.round(seconds))\r\n            datapoints.push(displacement * 3.281) //Meters to ft\r\n        }\r\n        //console.log(labels)\r\n        //console.log(datapoints)\r\n\r\n        chartData = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"Lateral Displacement (ft) over time\",\r\n                    data: datapoints,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(59, 237, 133, 0.2)\",\r\n                    borderColor: \"rgba(59, 237, 133, 1)\",\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    function measure(lat1, lon1, lat2, lon2){  // generally used geo measurement function\r\n        var R = 6378.137; // Radius of earth in KM\r\n        var dLat = lat2 * Math.PI / 180 - lat1 * Math.PI / 180;\r\n        var dLon = lon2 * Math.PI / 180 - lon1 * Math.PI / 180;\r\n        var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n        Math.sin(dLon/2) * Math.sin(dLon/2);\r\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n        var d = R * c;\r\n        return d * 1000; // meters\r\n    }\r\n\r\n    function getDecimalCoords() {\r\n        let arr = []\r\n        for(let i = 0; i < jump.length; i++) {\r\n            let point = jump[i]\r\n            let lat = point.lat\r\n            let latPole = point.latPole\r\n            let lon = point.lon\r\n            let lonPole = point.lonPole\r\n\r\n            if(lat == \"\" || lon == \"\") continue\r\n\r\n            let latDeg = parseInt(lat.substring(0,2))\r\n            let latMin = parseInt(lat.substring(2,4))\r\n            let latSec = parseFloat(lat.substring(4,8)) * 60\r\n\r\n            let lonDeg = parseInt(lon.substring(0,3))\r\n            let lonMin = parseInt(lon.substring(3,5))\r\n            let lonSec = parseFloat(lon.substring(5,9)) * 60\r\n            \r\n            let latDecimal = ConvertDMSToDD(latDeg, latMin, latSec, latPole)\r\n            let lonDecimal = ConvertDMSToDD(lonDeg, lonMin, lonSec, lonPole)\r\n\r\n            arr.push([latDecimal, lonDecimal])\r\n\r\n            //console.log(`Lat: ${latDecimal.toFixed(2)} Lon: ${lonDecimal.toFixed(2)}`)\r\n            //console.log(`LAT: D: ${latDeg} | M: ${latMin} | S: ${latSec}`)\r\n            //console.log(`LON: D: ${lonDeg} | M: ${lonMin} | S: ${lonSec}`)\r\n        }\r\n        return arr\r\n    }\r\n\r\n    function ConvertDMSToDD(degrees, minutes, seconds, direction) {\r\n        var dd = degrees + minutes/60 + seconds/(60*60);\r\n\r\n        if (direction == \"S\" || direction == \"W\") {\r\n            dd = dd * -1;\r\n        } // Don't do anything for N or E\r\n        return dd;\r\n    }\r\n</script>\r\n\r\n<graph>\r\n    {#if typeof(jump) !== \"undefined\"}\r\n    <div class=\"container\">\r\n        <Line data={chartData}></Line>\r\n    </div>\r\n    {/if}\r\n</graph>\r\n\r\n<style>\r\n    .container {\r\n        width: 50vw;\r\n        background: white;\r\n        margin-top: 2vw;\r\n        border-radius: 1.5vw;\r\n        padding: 2vw;\r\n        box-shadow: 3px 3px 7px rgb(0 0 0 / 0.3);\r\n    }\r\n</style>",
    "<script>\r\n    import Line from \"svelte-chartjs/src/Line.svelte\"\r\n    export let jump\r\n\r\n    var labels = []\r\n    var datapoints = []\r\n    var chartData\r\n\r\n    $: if(typeof(jump) !== \"undefined\") {\r\n        //console.log(jump)\r\n        let startSec\r\n        labels = []\r\n        datapoints = []\r\n        let lastAlt = -999\r\n        let lastTime = -1\r\n        jump.forEach(point => {\r\n            let h = point.timestamp.substring(0,2)\r\n            let min = point.timestamp.substring(2,4)\r\n            let sec = point.timestamp.substring(4)\r\n            let a = [h,min,sec]\r\n            let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2])\r\n            let vs\r\n            let dz\r\n            let dt\r\n\r\n            if(typeof(startSec) == \"undefined\") {\r\n                startSec = seconds\r\n                seconds = 0\r\n            } else {\r\n                seconds -= startSec\r\n            }\r\n            \r\n            if(lastAlt == -999) {\r\n                lastAlt = point.alt\r\n                dz = 0\r\n            } else {\r\n                dz = lastAlt - point.alt\r\n                lastAlt = point.alt\r\n            }\r\n\r\n            if(lastTime == -1) {\r\n                vs = 0\r\n                dt = 0\r\n                lastTime = seconds\r\n            } else {\r\n                dt = seconds - lastTime\r\n                lastTime = seconds\r\n                vs = dz/dt\r\n            }\r\n            //console.log(dt)\r\n            labels.push(Math.round(seconds))\r\n            datapoints.push(vs * 2.237) //M/S to Mph\r\n        })\r\n        //console.log(labels)\r\n        //console.log(datapoints)\r\n\r\n        chartData = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"Vertical Speed (mph) over time\",\r\n                    data: datapoints,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(130, 99, 255, 0.2)\",\r\n                    borderColor: \"rgba(130, 99, 255, 1)\",\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4\r\n                }\r\n            ]\r\n        }\r\n    }\r\n</script>\r\n\r\n<graph>\r\n    {#if typeof(jump) !== \"undefined\"}\r\n    <div class=\"container\">\r\n        <Line data={chartData}></Line>\r\n    </div>\r\n    {/if}\r\n</graph>\r\n\r\n<style>\r\n    .container {\r\n        width: 50vw;\r\n        background: white;\r\n        margin-top: 2vw;\r\n        border-radius: 1.5vw;\r\n        padding: 2vw;\r\n        box-shadow: 3px 3px 7px rgb(0 0 0 / 0.3);\r\n    }\r\n</style>",
    "<script>\r\n    import Line from \"svelte-chartjs/src/Line.svelte\"\r\n    export let jump\r\n\r\n    var labels = []\r\n    var datapoints = []\r\n    var chartData\r\n\r\n    $: if(typeof(jump) !== \"undefined\") {\r\n        //console.log(jump)\r\n        let startSec\r\n        labels = []\r\n        datapoints = []\r\n        jump.forEach(point => {\r\n            //console.log(point)\r\n            let h = point.timestamp.substring(0,2)\r\n            let min = point.timestamp.substring(2,4)\r\n            let sec = point.timestamp.substring(4)\r\n            let a = [h,min,sec]\r\n            let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2])\r\n\r\n            if(typeof(startSec) == \"undefined\") {\r\n                startSec = seconds\r\n                seconds = 0\r\n            } else {\r\n                seconds -= startSec\r\n            }\r\n\r\n            labels.push(Math.round(seconds))\r\n            datapoints.push(point.alt * 3.28084) //Meters to ft\r\n        })\r\n        //console.log(labels)\r\n        \r\n        chartData = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"Altitude (ft) over time\",\r\n                    data: datapoints,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(255, 99, 132, 0.2)\",\r\n                    borderColor: \"rgba(255, 99, 132, 1)\",\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4\r\n                }\r\n            ]\r\n        }\r\n    }\r\n</script>\r\n\r\n<graph>\r\n    {#if typeof(jump) !== \"undefined\"}\r\n    <div class=\"container\">\r\n        <Line data={chartData}></Line>\r\n    </div>\r\n    {/if}\r\n</graph>\r\n\r\n\r\n<style>\r\n    .container {\r\n        width: 50vw;\r\n        background: white;\r\n        margin-top: 2vw;\r\n        border-radius: 1.5vw;\r\n        padding: 2vw;\r\n        box-shadow: 3px 3px 7px rgb(0 0 0 / 0.3);\r\n    }\r\n</style>",
    "<script>\r\n    import Line from \"svelte-chartjs/src/Line.svelte\"\r\n    export let jump\r\n\r\n    var labels = []\r\n    var datapoints = []\r\n    var chartData\r\n\r\n    $: if(jump && typeof(jump) !== \"undefined\") {\r\n        //console.log(jump)\r\n        let startSec\r\n        labels = []\r\n        datapoints = []\r\n        jump.forEach(point => {\r\n            let h = point.timestamp.substring(0,2)\r\n            let min = point.timestamp.substring(2,4)\r\n            let sec = point.timestamp.substring(4)\r\n            let a = [h,min,sec]\r\n            let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2])\r\n            let vs\r\n            let dz\r\n            let dt\r\n\r\n            if(typeof(startSec) == \"undefined\") {\r\n                startSec = seconds\r\n                seconds = 0\r\n            } else {\r\n                seconds -= startSec\r\n            }\r\n            \r\n            \r\n            labels.push(Math.round(seconds))\r\n            datapoints.push(point.speedKnots*1.151) //Knots to mph\r\n        })\r\n        //console.log(labels)\r\n        //console.log(datapoints)\r\n\r\n        chartData = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"Lateral Speed (mph) Over Time\",\r\n                    data: datapoints,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(237, 199, 59, 0.2)\",\r\n                    borderColor: \"rgba(237, 199, 59, 1)\",\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4\r\n                }\r\n            ]\r\n        }\r\n    }\r\n</script>\r\n\r\n<graph>\r\n    {#if typeof(jump) !== \"undefined\"}\r\n    <div class=\"container\">\r\n        <Line data={chartData}></Line>\r\n    </div>\r\n    {/if}\r\n</graph>\r\n\r\n<style>\r\n    .container {\r\n        width: 50vw;\r\n        background: white;\r\n        margin-top: 2vw;\r\n        border-radius: 1.5vw;\r\n        padding: 2vw;\r\n        box-shadow: 3px 3px 7px rgb(0 0 0 / 0.3);\r\n    }\r\n</style>",
    "<script>\r\n    import Line from \"svelte-chartjs/src/Line.svelte\"\r\n    export let jump\r\n\r\n    var labels = []\r\n    var vertS = []\r\n    var ls = []\r\n    var datapoints = []\r\n    var chartData\r\n\r\n    $: if(typeof(jump) !== \"undefined\") {\r\n        //console.log(jump)\r\n        let startSec\r\n        labels = []\r\n        datapoints = []\r\n        vertS = []\r\n        ls = []\r\n        let lastAlt = -999\r\n        let lastTime = -1\r\n        jump.forEach(point => {\r\n            let h = point.timestamp.substring(0,2)\r\n            let min = point.timestamp.substring(2,4)\r\n            let sec = point.timestamp.substring(4)\r\n            let a = [h,min,sec]\r\n            let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2])\r\n            let vs\r\n            let dz\r\n            let dt\r\n\r\n            if(typeof(startSec) == \"undefined\") {\r\n                startSec = seconds\r\n                seconds = 0\r\n            } else {\r\n                seconds -= startSec\r\n            }\r\n            \r\n            if(lastAlt == -999) {\r\n                lastAlt = point.alt\r\n                dz = 0\r\n            } else {\r\n                dz = lastAlt - point.alt\r\n                lastAlt = point.alt\r\n            }\r\n\r\n            if(lastTime == -1) {\r\n                vs = 0\r\n                dt = 0\r\n                lastTime = seconds\r\n            } else {\r\n                dt = seconds - lastTime\r\n                lastTime = seconds\r\n                vs = dz/dt\r\n            }\r\n            labels.push(Math.round(seconds))\r\n            ls.push(point.speedKnots/1.944) //knots to m/s\r\n            vertS.push(vs)\r\n            datapoints.push(Math.sqrt((point.speedKnots/1.944)**2 + (vs)**2) * 2.237) //Norm and convert m/s to mph\r\n        })\r\n        //console.log(labels)\r\n        //console.log(datapoints)\r\n        //console.log(vertS)\r\n        //console.log(ls)\r\n\r\n        chartData = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"Total Speed (mph) over time\",\r\n                    data: datapoints,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(255, 99, 216, 0.2)\",\r\n                    borderColor: \"rgba(255, 99, 216, 1)\",\r\n                    cubicInterpolationMode: 'monotone',\r\n                    tension: 0.4\r\n                }\r\n            ]\r\n        }\r\n    }\r\n</script>\r\n\r\n<graph>\r\n    {#if typeof(jump) !== \"undefined\"}\r\n    <div class=\"container\">\r\n        <Line data={chartData}></Line>\r\n    </div>\r\n    {/if}\r\n</graph>\r\n\r\n<style>\r\n    .container {\r\n        width: 50vw;\r\n        background: white;\r\n        margin-top: 2vw;\r\n        border-radius: 1.5vw;\r\n        padding: 2vw;\r\n        box-shadow: 3px 3px 7px rgb(0 0 0 / 0.3);\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AAuBC,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,gBAAgB,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAC7D,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,KAAK,AACb,CAAC;ACrBD,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACZ,CAAC;ACkCE,KAAK,cAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,GAAG,AACpB,CAAC;AC2DD,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC,AACD,IAAI,cAAC,CAAC,AACF,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,WAAW,CAClB,MAAM,CAAE,WAAW,CACnB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,aAAa,CAAE,KAAK,CACpB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC,AAED,CAAC,cAAC,CAAC,AACC,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACd,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CACX,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,KAAK,AACpB,CAAC,AAED,KAAK,cAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,GAAG,AACtB,CAAC,AAED,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,AAChB,CAAC;ACnGD,OAAO,cAAC,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAC5B,aAAa,CAAE,GAAG,AACtB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,YAAY,AACjC,CAAC;ACxED,MAAM,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,AACf,CAAC,AAED,CAAC,eAAC,CAAC,AACC,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,GAAG,CACf,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,IAAI,AACpB,CAAC;AC+BD,IAAI,eAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,YAAY,CAC7B,aAAa,CAAE,GAAG,AACrB,CAAC,AACD,SAAS,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACjB,CAAC;ACLD,UAAU,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,YAAY,CAC7B,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,GAAG,AACtB,CAAC,AAED,KAAK,cAAC,CAAC,AACH,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,MAAM,CACf,aAAa,CAAE,KAAK,CACpB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC,AAED,SAAS,cAAC,CAAC,AACP,UAAU,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CACxC,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AAC1B,CAAC;ACAD,OAAO,aAAC,CAAC,AACL,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACf,CAAC,AACD,UAAU,aAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC;ACWD,WAAW,cAAC,CAAC,AACT,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACf,CAAC,AACD,IAAI,cAAC,CAAC,AACF,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC;AC3FH,GAAG,eAAC,CAAC,AACD,KAAK,CAAE,IAAI,AACf,CAAC;ACWD,YAAY,eAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,OAAO,AACnB,CAAC,AAED,GAAG,eAAC,CAAC,AACD,MAAM,CAAE,GAAG,AACf,CAAC,AAED,CAAC,eAAC,CAAC,AACC,SAAS,CAAE,MAAM,AACrB,CAAC,AAED,aAAa,eAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,KAAK,AACrB,CAAC,AAED,eAAe,eAAC,CAAC,AACb,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,IAAI,AACpB,CAAC;ACjCD,MAAM,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,GAAG,AACvB,CAAC;ACSD,IAAI,eAAC,CAAC,AACF,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,KAAK,CACpB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACjC,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC,AAED,KAAK,eAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,aAAa,CAC9B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,KAAK,eAAC,CAAC,AACH,MAAM,CAAE,CAAC,CACT,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AACvB,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,MAAM,CAAE,CAAC,CACT,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,GAAG,CACjB,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AAC1B,CAAC;AC6CD,UAAU,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,KAAK,CACpB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC;ACxCD,UAAU,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,KAAK,CACpB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC;AC7BD,UAAU,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,KAAK,CACpB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC;ACJD,UAAU,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,KAAK,CACpB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC;ACmBD,UAAU,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,KAAK,CACpB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC"
}